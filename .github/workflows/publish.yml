name: Publish

on:
  push:
    tags:
      - v*.*.*

jobs:
  pre-publish-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3
      - name: Setup integration test
        working-directory: crates/jpreprocess/tests
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release download --repo jpreprocess/open_jtalk v0.0.5
          chmod +x openjtalk_bin

          gh release download --repo jpreprocess/jpreprocess v0.0.1-rc0
          tar xJvf dictionaries.tar.xz

          rm *.tar.gz *.tar.xz
      - name: Build
        run: cargo build --verbose --all-features
      - name: Run tests
        run: cargo test --verbose --all-features -- --include-ignored
      - name: Run Clippy
        run: cargo clippy --all-targets

  build-binary:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            feature: []
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            feature: []
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            feature: []
          - target: x86_64-apple-darwin
            os: macos-latest
            feature: []
          - target: aarch64-apple-darwin
            os: macos-latest
            feature: []
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            feature: ["naist-jdic"]
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            feature: ["naist-jdic"]
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            feature: ["naist-jdic"]
          - target: x86_64-apple-darwin
            os: macos-latest
            feature: ["naist-jdic"]
          - target: aarch64-apple-darwin
            os: macos-latest
            feature: ["naist-jdic"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - uses: dtolnay/rust-toolchain@d8352f6b1d2e870bc5716e7a6d9b65c4cc244a1a # master
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Build
        run: |
          cargo install cross
          cross build --release --target=${{ matrix.target }} --features=binary,${{ join(matrix.feature, ',') }} --bin dict_tools --bin jpreprocess

      - name: Package
        shell: bash
        run: |
          TMP_NAME="${{ format('jpreprocess-{0}-{1}.tgz', matrix.target, join(matrix.feature, '-')) }}"
          NAME="${TMP_NAME/-.tgz/.tgz}"

          mkdir -p target/.jpreprocess_artifact/jpreprocess
          cp target/${{ matrix.target }}/release/{jpreprocess,dict_tools}${{ contains(matrix.target, 'windows') && '.exe' || '' }} target/.jpreprocess_artifact/jpreprocess

          tar czvf "$NAME" -C target/.jpreprocess_artifact jpreprocess

          rm -r target/.jpreprocess_artifact

      - name: Upload Artifact
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: ${{ format('build-{0}-{1}', matrix.target, join(matrix.feature, '-')) }}
          path: "*.tgz"

  build-naist-jdic:
    runs-on: ubuntu-latest
    needs: [build-binary]
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          repository: jpreprocess/naist-jdic
          ref: v0.1.3
          path: naist-jdic-source
      - name: Download binary
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          name: build-x86_64-unknown-linux-gnu-
      - name: Build
        run: |
          tar xzvf jpreprocess-x86_64-unknown-linux-gnu.tgz
          chmod +x jpreprocess/dict_tools
          jpreprocess/dict_tools build jpreprocess naist-jdic-source naist-jdic
      - name: Package naist-jdic
        run: |
          tar czvf naist-jdic-jpreprocess.tar.gz naist-jdic
      - name: Upload Artifact
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: naist-jdic
          path: naist-jdic-jpreprocess.tar.gz

  publish-crates:
    runs-on: ubuntu-latest
    needs: [pre-publish-test]
    env:
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: publish
        run: |
          publish_package () {
            VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r ".packages[] | select(.name==\"$1\") | .version")
            VERSIONS=$(curl -s -XGET "https://crates.io/api/v1/crates/$1" | jq -r 'select(.versions != null) | .versions[].num')
            if echo "${VERSIONS}" | grep "${VERSION}" >/dev/null; then
              echo "$1 ${VERSION} has already been published"
            else
              sleep 15
              cargo publish -p "$1" --all-features
            fi
          }

          publish_package "jpreprocess-core"
          sleep 5
          publish_package "jpreprocess-dictionary"
          sleep 5
          publish_package "jpreprocess-dictionary-builder"
          sleep 5
          publish_package "jpreprocess-naist-jdic"
          sleep 5
          publish_package "jpreprocess-window"
          sleep 5
          publish_package "jpreprocess-njd"
          sleep 5
          publish_package "jpreprocess-jpcommon"
          sleep 5
          publish_package "jpreprocess"

  create-release:
    name: Create Release
    permissions:
      contents: write
    needs: [build-binary, build-naist-jdic, publish-crates]
    runs-on: ubuntu-latest
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
      - name: Check Tag
        id: check-tag
        run: |
          if [[ ${{ github.event.ref }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Not prerelease"
            echo "prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "Prerelease"
            echo "prerelease=true" >> $GITHUB_OUTPUT
          fi
      - name: Create release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: ${{ steps.check-tag.outputs.prerelease == 'true' }}
          files: |
            **/*.zip
            **/*.tar.gz
            **/*.tgz
